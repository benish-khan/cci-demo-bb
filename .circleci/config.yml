version: 2.1 # use 2.1 to make use of orbs and pipelines

#### Orbs  ###
orbs:
  python: circleci/python@1.3.3
  slack: circleci/slack@2.0.0
  heroku: circleci/heroku@1.2.6 

### Executors ### 
executors:
  python-executor:
    docker:
      - image: cimg/python:3.8
    resource_class: medium


### Workflows ###
workflows:
  version: 2.1
  build-test-&-deploy: 
    jobs:
      - build
      # - test_crud_operations:
      #     requires:
      #       - build 
      - hold-heroku-deploy:
          type: approval
          requires:
            - build
            # - test_crud_operations
      - deploy-to-heroku: #the app will deploy changed made only when pushed from testingdb branch
          requires:
            - hold-heroku-deploy
          filters:
            branches:
              only:
                - testingdb


 ### Jobs ###
jobs:
  
  build: #job with steps to build my application
    executor: python-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - pip-packages-v1-{{ .Branch }}-
            - pip-packages-v1-
      - run: 
          name: Install dependencies
          command: | 
            pipenv install virtualenv
            virtualenv 
            source venv/bin/activate

      - run:
          name: Running tests within test_app.py file. 
          command: | 
            virtualenv venv
            source venv/bin/activate
            pipenv run pytest test_app.py 
            pytest --junitxml=test-results/junit.xml 
            
            # pipenv shell
            # run coverage test_app.py
            # pipenv run pytest test_app.py
      # - run:
      #     name: Check Python version
      #     command: | 
      #       pipenv run python --version
      # - run:
      #     name: Print relative path 
      #     command: pwd

      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
          key: pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ./venv

  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - .




  # test_crud_operations: #job with steps to test my application
  #   executor: python-executor   #this was pre-defined and called here
  #   parallelism: 4
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: .
  #     - run: 
  #         name: Install Python Dependencies in a venv 
  #         command: | 
  #           pipenv install 
       

  #     - run:
  #         name: Create test-results folder
  #         command: mkdir test-results
  #     - run:
  #         name: Conversion of test-results to junit.xml file
  #         command: pytest --junitxml=test-results/junit.xml

  #     - run: 
  #         command: cp test-results.xml ~/junit/
  #         when: always
            
            
    

      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: trl

      - run:
          name: Run Tests
          command: echo "Its working"




  deploy-to-heroku: #job with steps to deploy my application once build and tests jobs pass on master only.
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Setup Heroku CLI 
          command: |
            sudo curl https://cli-assets.heroku.com/install.sh | sh
      - run:
          name: Restart heroku dyno
          command: |
            heroku restart web.1 --app $HEROKU_APP_NAME

      - run:
          name: Run Logs
          command: |
            heroku logs --app $HEROKU_APP_NAME